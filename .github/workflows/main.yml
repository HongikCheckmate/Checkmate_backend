name: CI/CD using github actions & docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project1/project1 
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Build with Gradle Wrapper
      run: |
        chmod +x ./gradlew
        ./gradlew build

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    # Docker build & Push 
    - name: Docker build & push to Docker hub
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/checkmate .
        docker push ${{ secrets.DOCKER_USERNAME }}/checkmate

    - name: Docker image pull & Deploy to EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e
          
          IMAGE="${{ secrets.DOCKER_USERNAME }}/checkmate:latest"
          CONTAINER="checkmate-app"
          
          # 최신 이미지 pull
          sudo docker pull "$IMAGE"
          
          # 동일 이름 컨테이너만 정지/삭제 (다른 컨테이너는 영향 없음)
          if sudo docker ps -a --format '{{.Names}}' | grep -qx "$CONTAINER"; then
            sudo docker rm -f "$CONTAINER"
          fi
          
          # 새로 실행 (환경변수는 --env-file에)
          sudo docker run -d \
            --name "$CONTAINER" \
            --restart=always \
            --log-driver=syslog \
            --env-file /opt/checkmate/.env \
            -p 8080:8080 \
            "$IMAGE"
          
          # 종료된 컨테이너만 정리
          EXITED=$(sudo docker ps -aq -f status=exited)
          if [ -n "$EXITED" ]; then
            sudo docker rm $EXITED
          fi
          
          sudo docker image prune -f